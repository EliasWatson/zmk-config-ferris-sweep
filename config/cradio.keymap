/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define SYMB    1
#define FUNC    2

&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        brm: bottom_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "BOTTOM_ROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            bindings =
                <&kp>,
                <&kp>;
        };
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mo SYMB>,
                <&mo SYMB>,
                <&tog FUNC>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_tab {
            timeout-ms = <50>;
            key-positions = <0 10>;
            bindings = <&kp TAB>;
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <10 20>;
            bindings = <&kp ESC>;
        };

        combo_quote {
            timeout-ms = <50>;
            key-positions = <9 19>;
            bindings = <&kp SQT>;
        };

        combo_enter {
            timeout-ms = <50>;
            key-positions = <19 29>;
            bindings = <&kp ENTER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
        &kp Q        &kp W        &kp E           &kp R                   &kp T          &kp Y   &kp U            &kp I          &kp O            &kp P
        &kp A        &kp S        &kp D           &kp F                   &kp G          &kp H   &kp J            &kp K          &kp L         &kp SEMI
 &brm LCTRL Z  &brm LGUI X  &brm LALT C           &kp V                   &kp B          &kp N   &kp M  &brm RALT COMMA  &brm RGUI DOT  &brm RCTRL FSLH
                                         &kp LEFT_SHIFT  &mt LC(LS(LALT)) SPACE  &kp BACKSPACE    &td0
            >;
        };

        symbol_layer {
            bindings = <
    &kp N1  &kp N2         &kp N3    &kp N4     &kp N5    &kp N6    &kp N7     &kp N8     &kp N9    &kp N0
 &kp GRAVE  &trans         &trans  &kp HOME  &kp PG_UP  &kp LEFT  &kp DOWN     &kp UP  &kp RIGHT  &kp LBKT
    &trans  &trans  &kp C_AL_CALC   &kp END  &kp PG_DN    &trans  &kp BSLH  &kp MINUS  &kp EQUAL  &kp RBKT
                                     &trans     &trans    &trans    &trans
            >;
        };

        function_layer {
            bindings = <
    &kp F1        &kp F2        &kp F3        &kp F4      &kp F5      &kp F6        &kp F7        &kp F8      &kp F9  &kp F10
     &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &none  &kp C_PREV  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT  &kp F11
 &kp LCTRL      &kp LGUI      &kp LALT         &none  &bt BT_CLR       &none      &kp C_PP         &none       &none  &kp F12
                                              &trans      &trans      &trans        &tog 2
            >;
        };
    };
};
